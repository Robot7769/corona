#!/bin/bash
#TODO hlavička souboru
#TODO err zprávy na stderr
#!BUG bez filtru to počítá i první řádek infected

####################################################################
## Help ##
print_help () {
    echo -e '\e[1;mJMÉNO\033[0m'
    echo -e '  \033[1mcorona\033[0m — analyzátor záznamů osob s prokázanou nákazou koronavirem\n   způsobujícím onemocnění COVID-19\n'

    echo -e '\033[1mPOUŽITÍ\033[0m'
    echo -e '  \033[1mcorona\033[0m [\033[4m-h\033[0m] [\033[4mFILTERS\033[0m] [\033[4mCOMMAND\033[0m] [\033[4mLOG\033[0m [\033[4mLOG2\033[0m [...]]\n'

    echo -e '\033[1mVOLBY\033[0m'
    echo -e '  \033[1mCOMMAND\033[0m může být jeden z:'
    echo -e '      \033[1minfected\033[0m — spočítá počet nakažených.'
    echo -e '      \033[1mmerge\033[0m — sloučí několik souborů se záznamy do jednoho, zachovávající původní pořadí (hlavička bude ve výstupu jen jednou).'
    echo -e '      \033[1mgender — vypíše počet nakažených pro jednotlivá pohlaví.'
    echo -e '      \033[1mage\033[0m — vypíše statistiku počtu nakažených osob dle věku (bližší popis je níže).'
    echo -e '      \033[1mdaily\033[0m — vypíše statistiku nakažených osob pro jednotlivé dny.'
    echo -e '      \033[1mmonthly\033[0m — vypíše statistiku nakažených osob pro jednotlivé měsíce.'
    echo -e '      \033[1myearly\033[0m — vypíše statistiku nakažených osob pro jednotlivé roky.'
    echo -e '      \033[1mcountries\033[0m — vypíše statistiku nakažených osob pro jednotlivé země nákazy (bez ČR, tj. kódu CZ).'
    echo -e '      \033[1mdistricts\033[0m — vypíše statistiku nakažených osob pro jednotlivé okresy.'
    echo -e '      \033[1mregions\033[0m — vypíše statistiku nakažených osob pro jednotlivé kraje.'
    echo ''
   
    
    echo -e '  \033[1mFILTERS\033[0m může být kombinace následujících (každý maximálně jednou):'
    echo -e '      \033[1m-a DATETIME\033[0m — after: jsou uvažovány pouze záznamy PO tomto datu (včetně tohoto data). DATETIME je formátu YYYY-MM-DD.'
    echo -e '      \033[1m-b DATETIME\033[0m — before: jsou uvažovány pouze záznamy PŘED tímto datem (včetně tohoto data).'
    echo -e '      \033[1m-g GENDER\033[0m — jsou uvažovány pouze záznamy nakažených osob daného pohlaví. GENDER může být M (muži) nebo Z (ženy).'
    echo -e '      \033[1m-s [\033[4mWIDTH]\033[0m u příkazů gender, age, daily, monthly, yearly, countries, districts a regions vypisuje data ne číselně, ale graficky v podobě histogramů. Nepovinný parametr WIDTH nastavuje šířku histogramů, tedy délku nejdelšího řádku, na WIDTH. Tedy, WIDTH musí být kladné celé číslo. Pokud není parametr WIDTH uveden, řídí se šířky řádků výchozími hodnotami.'
    echo -e '      \033[1m-d DISTRICT_FILE\033[0m — pro příkaz districts vypisuje místo LAU 1 kódu okresu jeho jméno. Mapování kódů na jména je v souboru DISTRICT_FILE --neimlplementováno'   #!--neimlplementováno
    echo -e '      \033[1m-r REGIONS_FILE\033[0m — pro příkaz regions vypisuje místo NUTS 3 kódu kraje jeho jméno. Mapování kódů na jména je v souboru REGIONS_FILE --neimlplementováno'       #!--neimlplementováno

}
hlavicka () {
    echo 'id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs'
}
filtr_pohlavi () {
    awk -F, "-vG=$pohlavi" '{
        if (G == "") {print $0} 
        else {
            if ($4 == G)  {print $0}
        } 
    }'
}
filtr_po () {
    awk -F, "-vdatum=$po_datum" '{
        if (datum == "") {print $0} 
        else {
            if ($2 >= datum)  {print $0}
        } 
    }'
}
filtr_pred () {
    awk -F, "-vdatum=$pred_datum" '{
        if (datum == "") {print $0} 
        else {
            if ($2 <= datum)  {print $0}
        } 
    }'
}
filtry () {
    filtr_pohlavi | filtr_pred | filtr_po
}
valid_datum () {
   if [[ -n "$1" ]]; then
        if [[ $1 =~ ^[0-9]{4}-[0-1]{1}[0-9]{1}-[0-3]{1}[0-9]{1}$ ]] && date "+%Y-%m-%d" -d "$1" > /dev/null 2>&1; then
            return 0
        else
            return 1
        fi 
   fi
   
}
vek () {
    cat ${soubor}| sed 1d | filtry | awk -F, '{
        if ($3 == "") age_count[12]++;
        else if ($3 <= 5) age_count[0]++;
        else if ($3 <= 15) age_count[1]++;
        else if ($3 <= 25) age_count[2]++;
        else if ($3 <= 35) age_count[3]++;
        else if ($3 <= 45) age_count[4]++;
        else if ($3 <= 55) age_count[5]++;
        else if ($3 <= 65) age_count[6]++;
        else if ($3 <= 75) age_count[7]++;
        else if ($3 <= 85) age_count[8]++;
        else if ($3 <= 95) age_count[9]++;
        else if ($3 <= 105) age_count[10]++;
        else if ($3 > 105) age_count[11]++;
        else;
        }
        END{print "0-5   : "age_count[0];
            print "6-15  : "age_count[1];
            print "16-25 : "age_count[2];
            print "26-35 : "age_count[3];
            print "36-45 : "age_count[4];
            print "46-55 : "age_count[5];
            print "56-65 : "age_count[6];
            print "66-75 : "age_count[7];
            print "76-85 : "age_count[8];
            print "86-95 : "age_count[9];
            print "96-105: "age_count[10];
            print ">105  : "age_count[11];
            if (age_count[12] > 0) {
                print "None  : "age_count[12];
            }
            }'
}
####################################################################
#if [ "$#" -eq 0 ]; then
#   hlavicka 
#   cat ${soubor}
#   exit
#fi

cislo='^[0-9]+$'

pohlavi=""
pred_datum=""
po_datum=""
cmd=""
soubor=""
delka_grafu=-1

## Main ##
while [ $# -ne 0 ]; do
   case $1 in
        -h) print_help; exit;;
        -a) po_datum=$2;shift;;
        -b) pred_datum=$2;shift;;
        -g) pohlavi=$2;shift;;
        -s) if  [[ $2 =~ $cislo ]]; then
                delka_grafu=$2;
                shift;        #!tady bude problém 
            else
                delka_grafu=0;
            fi
            ;;
        -d) echo '-d nebyl implementován';;
        -r) echo '-r nebyl implementován';;
        age | countries | daily | districts | gender | infected | merge | monthly | regions | yearly )
             if [ -z $cmd ]; then
                cmd=$1
            else
                #*error
                echo 'COMMAND může být jen jeden' 1>&2
                exit
            fi ;;
        *.gz) zcat "$1" ;; #add check comand 
        *.bz2) bzcat "$1";; #add check comand
        *.csv) soubor+=" $1";;

   esac
shift
done

if [ -z soubor ]; then
    soubor="/dev/stdin"
fi

valid_datum $po_datum
if [ $? == 1 ]; then
    echo "Datum u přepínače -a "$po_datum" není validní" 1>&2
    exit
fi

valid_datum $pred_datum
if [ $? == 1 ]; then
    echo "Datum u přepínače -b "$pred_datum" není validní" 1>&2
    exit
fi



case "${cmd}" in
    age) vek
    ;;
    countries)
        echo "item = 2 or item = 3"
    ;;
    daily) cat ${soubor}| sed 1d | filtry | sort -t, -k2 | awk -F, '{
        if (NR == 1) {
            datum=$2;
            count=0;
        } 
     } 
     {
        if (datum == $2) {
            count++;
        }
        else {
            print ""datum": "count"";
            count=1;
            datum=$2;
        }
     } 
     END{
        print ""datum": "count"";
    }'
        
    ;;
    districts)

    ;;
    gender) cat ${soubor}| sed 1d | filtry | awk -F, 'BEGIN{M=0;Z=0;count=0;none=0} {
        if ($4=="M") M++;
        if ($4=="Z") Z++;
        count++;
        } 
        END{
        print "M: "M"\nZ: "Z"";
        if (none=(count - M - Z )> 0) print "None: "none""; 
        }'
    ;;
    infected)
        cat ${soubor}| sed 1d | filtry | awk -F, 'BEGIN{radek=0} {if ($0 > 0) radek++} END{ print radek}'
        #pocet_radku=0;
        #cat ${soubor}| sed 1d | filtry | awk -F, "-vradek=$pocet_radku" '{if ($0 > 0) radek++} END{"$pocet_radku" <= radek}'
        #echo $pocet_radku
    ;;
    merge)

    ;;
    monthly) cat ${soubor}| sed 1d | filtry | sort -t, -k2 | awk -F, '{
        if (NR == 1) {
            datum=substr($2,1,7);
            count=0;
        } 
     } 
     {
        if (datum == substr($2,1,7)) {
            count++;
        }
        else {
            print ""datum": "count"";
            count=1;
            datum=substr($2,1,7);
        }
     } 
     END{
        print ""datum": "count"";
    }'

    ;;
    regions)

    ;;
    yearly)

    ;;
    *) hlavicka;
    cat ${soubor}| sed 1d | filtry 
    ;;
esac

#echo "-s je :"$delka_grafu""
# G="Z"; cat osoby-short.csv | awk -F, "-vG=$G" '$4 == G {print $0}'
# awk -F, 'BEGIN{pocet=0} {if ($0 > 0) {pocet++}} END{print pocet}'



#echo $pohlavi $pred_datum $po_datum $cmd;

#awk -F ',' '{ if($3 == $'"$pohlavi"') print $0;}' osoby-short.csv



#awk 'BEGIN{RS=ORS="\r\n"} $4==$pohlavi {print $1 $2 $3 $4 $5}' osoby-short.csv

#cat osoby-short.csv | awk '$='

